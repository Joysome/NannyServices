version: '3.8'

services:
  sqlserver:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: nanny-sqlserver
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=${DB_PASSWORD}
      - MSSQL_PID=Express
    ports:
      - "${DB_PORT:-1433}:1433"
    volumes:
      - sqlserver-data:/var/opt/mssql
    networks:
      - nanny-network
    healthcheck:
      test: [ "CMD-SHELL", "/opt/mssql-tools18/bin/sqlcmd -S localhost -U sa -P \"${DB_PASSWORD}\" -C -Q \"SELECT 1\" -b -o /dev/null || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s

  migrator:
    build:
      context: .
      dockerfile: ./Nanny.Admin.Api/Dockerfile.migrator
    container_name: nanny-migrator
    depends_on:
      sqlserver:
        condition: service_healthy
    environment:
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - ConnectionStrings__DefaultConnection=Server=sqlserver;Database=${DB_NAME};User=sa;Password=${DB_PASSWORD};TrustServerCertificate=True;
    networks:
      - nanny-network
    profiles:
      - migration

  api:
    build:
      context: .
      dockerfile: ./Nanny.Admin.Api/Dockerfile
    container_name: nanny-api
    depends_on:
      sqlserver:
        condition: service_healthy
      migrator:
        condition: service_completed_successfully
        required: false
    environment:
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT:-Development}
      - ConnectionStrings__DefaultConnection=Server=sqlserver;Database=${DB_NAME};User=sa;Password=${DB_PASSWORD};TrustServerCertificate=True;
    ports:
      - "${API_PORT:-8080}:8080"
      - "${API_HTTPS_PORT:-8081}:8081"
    networks:
      - nanny-network
    healthcheck:
      test: [ "CMD-SHELL", "curl -f --max-time 5 http://localhost:8080/health || exit 1" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

volumes:
  sqlserver-data:
    driver: local

networks:
  nanny-network:
    driver: bridge
